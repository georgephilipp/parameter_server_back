#include <vector>
#include <fstream>
#include <algorithm>
#include <iostream>
#include <cstdint>
#include <sstream>
#include <limits>
#include <random>
#include <set>
#include <thread>
#include <boost/thread/barrier.hpp>

#include <petuum_ps_common/include/petuum_ps.hpp>
#include <petuum_ps_common/include/system_gflags_declare.hpp>
#include <petuum_ps_common/include/table_gflags_declare.hpp>
#include <petuum_ps_common/include/init_table_config.hpp>
#include <petuum_ps_common/include/init_table_group_config.hpp>
#include <gflags/gflags.h>
#include <glog/logging.h>

size_t X_num_rows, X_num_cols; // Number of rows and cols. (L_table has N_ rows, R_table has M_ rows.)
std::vector<int32_t> X_row; // Row index of each nonzero entry in the data matrix
std::vector<int32_t> X_col; // Column index of each nonzero entry in the data matrix
std::vector<float> X_val; // Value of each nonzero entry in the data matrix
std::vector<int32_t> X_partition_starts;

void ReadBinaryMatrix(const std::string &filename, int32_t partition_id) {
  std::string bin_file = filename + "." + std::to_string(partition_id);

  FILE *bin_input = fopen(bin_file.c_str(), "rb");
  CHECK(bin_input != 0) << "failed to read " << bin_file;

  uint64_t num_nnz_this_partition = 0,
        num_rows_this_partition = 0,
        num_cols_this_partition = 0;
  size_t read_size = fread(&num_nnz_this_partition, sizeof(uint64_t), 1, bin_input);
  CHECK_EQ(read_size, 1);
  read_size = fread(&num_rows_this_partition, sizeof(uint64_t), 1, bin_input);
  CHECK_EQ(read_size, 1);
  read_size = fread(&num_cols_this_partition, sizeof(uint64_t), 1, bin_input);
  CHECK_EQ(read_size, 1);
  LOG(INFO) << "num_nnz_this_partition: " << num_nnz_this_partition
    << " num_rows_this_partition: " << num_rows_this_partition
    << " num_cols_this_partition: " << num_cols_this_partition;

  X_row.resize(num_nnz_this_partition);
  X_col.resize(num_nnz_this_partition);
  X_val.resize(num_nnz_this_partition);

  read_size = fread(X_row.data(), sizeof(int32_t), num_nnz_this_partition, bin_input);
  CHECK_EQ(read_size, num_nnz_this_partition);
  read_size = fread(X_col.data(), sizeof(int32_t), num_nnz_this_partition, bin_input);
  CHECK_EQ(read_size, num_nnz_this_partition);
  read_size = fread(X_val.data(), sizeof(float), num_nnz_this_partition, bin_input);
  CHECK_EQ(read_size, num_nnz_this_partition);

  X_num_rows = num_rows_this_partition;
  X_num_cols = num_cols_this_partition;
  LOG(INFO) << "partition = " << partition_id
            << " #row = " << X_num_rows
            << " #cols = " << X_num_cols;
}

int main (int argc, char *argv[]) {
  int32_t
  ReadBinaryMatrix("/l0/netflix.64.bin", 33);
}
